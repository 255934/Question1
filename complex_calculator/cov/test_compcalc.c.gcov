        -:    0:Source:test/test_compcalc.c
        -:    0:Programs:3
        -:    1:#include "complex_calculator.h"
        -:    2:#include "unity.h"
        -:    3:#include "unity_internals.h"
        -:    4:
        -:    5:/**
        -:    6: * @brief Unit testing for basic calculator functions on complex numbers
        -:    7: * 
        -:    8: */
        -:    9:
        -:   10:static complex_t c1 = {0, 0};
        -:   11:static complex_t c2 = {0, 0};
        -:   12:static complex_t result = {0, 0};
        -:   13:/* Required by the unity test framework */
        3:   14:void setUp()
        -:   15:{
        3:   16:}
------------------
setUp:
------------------
setUp:
------------------
setUp:
------------------
        -:   17:/* Required by the unity test framework */
        3:   18:void tearDown()
        -:   19:{
        3:   20:}
------------------
tearDown:
------------------
tearDown:
------------------
tearDown:
------------------
        -:   21:
        1:   22:void test_zero(void)
        -:   23:{
        -:   24:    //Checking for complex numbers with zero coefficients
        1:   25:    c1.real = 0;
        1:   26:    c1.imaginary = 0;
        -:   27:    
        1:   28:    c2.real = 0;
        1:   29:    c2.imaginary = 0;
        -:   30:    
        1:   31:    TEST_ASSERT_EQUAL(SUCCESS, complex_sum(&c1, &c2, &result));
        1:   32:    TEST_ASSERT_EQUAL(0, result.real);
        1:   33:    TEST_ASSERT_EQUAL(0, result.imaginary);
        1:   34:    TEST_ASSERT_EQUAL(SUCCESS, complex_diff(&c1, &c2, &result));
        1:   35:    TEST_ASSERT_EQUAL(0, result.real);
        1:   36:    TEST_ASSERT_EQUAL(0, result.imaginary);
        1:   37:    TEST_ASSERT_EQUAL(SUCCESS, complex_prod(&c1, &c2, &result));
        1:   38:    TEST_ASSERT_EQUAL(0, result.real);
        1:   39:    TEST_ASSERT_EQUAL(0, result.imaginary);
        1:   40:    TEST_ASSERT_EQUAL(SUCCESS, complex_div(&c1, &c2, &result));
        1:   41:    TEST_ASSERT_EQUAL(0, result.real);
        1:   42:    TEST_ASSERT_EQUAL(0, result.imaginary);
        1:   43:}
------------------
test_zero:
------------------
test_zero:
------------------
test_zero:
------------------
        1:   44:void test_positive(void)
        -:   45:{
        1:   46:    c1.real = 25;
        1:   47:    c1.imaginary = 15;
        -:   48:    
        1:   49:    c2.real = 75;
        1:   50:    c2.imaginary = 95;
        -:   51:    
        1:   52:    TEST_ASSERT_EQUAL(SUCCESS, complex_sum(&c1, &c2, &result));
        1:   53:    TEST_ASSERT_EQUAL(100, result.real);
        1:   54:    TEST_ASSERT_EQUAL(110, result.imaginary);
        1:   55:    TEST_ASSERT_EQUAL(SUCCESS, complex_diff(&c1, &c2, &result));
        1:   56:    TEST_ASSERT_EQUAL(-50, result.real);
        1:   57:    TEST_ASSERT_EQUAL(-80, result.imaginary);
        1:   58:    TEST_ASSERT_EQUAL(SUCCESS, complex_prod(&c1, &c2, &result));
        1:   59:    TEST_ASSERT_EQUAL(450, result.real);
        1:   60:    TEST_ASSERT_EQUAL(3500, result.imaginary);
        1:   61:    TEST_ASSERT_EQUAL(SUCCESS, complex_div(&c1, &c2, &result));
        1:   62:    TEST_ASSERT_EQUAL(0.2252559727, result.real);
        1:   63:    TEST_ASSERT_EQUAL(-0.08532423208, result.imaginary);
        1:   64:}
------------------
test_positive:
------------------
test_positive:
------------------
test_positive:
------------------
        -:   65:
        1:   66:void test_negative(void)
        -:   67:{
        1:   68:    c1.real = -25;
        1:   69:    c1.imaginary = -15;
        -:   70:    
        1:   71:    c2.real = 75;
        1:   72:    c2.imaginary = 95;
        -:   73:    
        1:   74:    TEST_ASSERT_EQUAL(SUCCESS, complex_sum(&c1, &c2, &result));
        1:   75:    TEST_ASSERT_EQUAL(50, result.real);
        1:   76:    TEST_ASSERT_EQUAL(80, result.imaginary);
        1:   77:    TEST_ASSERT_EQUAL(SUCCESS, complex_diff(&c1, &c2, &result));
        1:   78:    TEST_ASSERT_EQUAL(-100, result.real);
        1:   79:    TEST_ASSERT_EQUAL(-110, result.imaginary);
        1:   80:    TEST_ASSERT_EQUAL(SUCCESS, complex_prod(&c1, &c2, &result));
        1:   81:    TEST_ASSERT_EQUAL(-450, result.real);
        1:   82:    TEST_ASSERT_EQUAL(-3500, result.imaginary);
        1:   83:    TEST_ASSERT_EQUAL(SUCCESS, complex_div(&c1, &c2, &result));
        1:   84:    TEST_ASSERT_EQUAL(-0.2252559727, result.real);
        1:   85:    TEST_ASSERT_EQUAL(0.08532423208, result.imaginary);
        -:   86:
        1:   87:    c1.real = -25;
        1:   88:    c1.imaginary = -15;
        -:   89:    
        1:   90:    c2.real = -75;
        1:   91:    c2.imaginary = -95;
        -:   92:    
        1:   93:    TEST_ASSERT_EQUAL(SUCCESS, complex_sum(&c1, &c2, &result));
        1:   94:    TEST_ASSERT_EQUAL(-100, result.real);
        1:   95:    TEST_ASSERT_EQUAL(-110, result.imaginary);
        1:   96:    TEST_ASSERT_EQUAL(SUCCESS, complex_diff(&c1, &c2, &result));
        1:   97:    TEST_ASSERT_EQUAL(50, result.real);
        1:   98:    TEST_ASSERT_EQUAL(80, result.imaginary);
        1:   99:    TEST_ASSERT_EQUAL(SUCCESS, complex_prod(&c1, &c2, &result));
        1:  100:    TEST_ASSERT_EQUAL(450, result.real);
        1:  101:    TEST_ASSERT_EQUAL(3500, result.imaginary);
        1:  102:    TEST_ASSERT_EQUAL(SUCCESS, complex_div(&c1, &c2, &result));
        1:  103:    TEST_ASSERT_EQUAL(0.2252559727, result.real);
        1:  104:    TEST_ASSERT_EQUAL(-0.08532423208, result.imaginary);
        -:  105:
        1:  106:}
------------------
test_negative:
------------------
test_negative:
------------------
test_negative:
------------------
        -:  107:
        1:  108:int main(void)
        -:  109:{
        -:  110:    /* Initiate the Unity Test Framework */
        1:  111:    UNITY_BEGIN();
        -:  112:
        -:  113:    /* Run Test functions */
        1:  114:    RUN_TEST(test_zero);
        1:  115:    RUN_TEST(test_positive);
        1:  116:    RUN_TEST(test_negative);
        -:  117:
        -:  118:    /* Close the Unity Test Framework */
        1:  119:    return UNITY_END();
        -:  120:}
